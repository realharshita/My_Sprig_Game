/*
In "Quantum Escape," players control a scientist who accidentally gets trapped in a quantum computer 
simulation. The game combines puzzle-solving with platforming elements, set in a visually abstract and 
ever-changing digital environment.

Key Features:
@title: Quantum Escape
@author: Harshita
@tags: []
@addedOn: 2024-00-00
*/

const player = "p"
const box = "b"
const entangled_box_red_a = "e"
const entangled_box_red_b = "f"
const target = "t" 
const wall = "w"

setLegend(
  
  [ player, bitmap`
................
................
................
.....L....L.....
.....LL..LL.....
.....000000.....
...L.0....0.L...
....L07..70L....
.....0.LL.0.....
.....0.33.0.....
.....000000.....
.....LL..LL.....
.....L....L.....
................
................
................` ],
  [ box, bitmap`
................
................
................
................
................
.....000000.....
.....000000.....
.....000000.....
.....000000.....
.....000000.....
.....000000.....
................
................
................
................
................` ],
  [ entangled_box_red_a, bitmap`
................
................
................
................
................
.....030303.....
.....303030.....
.....030300.....
.....303000.....
.....030000.....
.....300000.....
................
................
................
................
................` ],
  [ entangled_box_red_b, bitmap`
................
................
................
................
................
.....000003.....
.....000030.....
.....000303.....
.....003030.....
.....030303.....
.....303030.....
................
................
................
................
................` ],
  [ target, bitmap`
................
................
................
................
................
......0..0......
.....046740.....
......7..6......
......6..7......
.....047640.....
......0..0......
................
................
................
................
................` ],
  [ wall, bitmap`
................
................
................
................
................
.....C.C.C.C....
.....3C3C3C3....
.....C3C3C3C....
.....3C3C3C3....
.....C3C3C3C....
.....3C3C3C3....
................
................
................
................
................` ]


)

setSolids([ player, box, wall,entangled_box_red_b,entangled_box_red_a ]); 
let level = 0
const levels = [
  map`
p.....
..b...
..t...
..w...`,
  map`
..p.........
.....b..t...
..e...f.....
............
....w.......`,
  map`
p.....
..b...
..t...
..w...`, 
  map`
p.....
..b...
..t...
..w...`,
  map`
p.....
..b...
..t...
..w...`,
  
]


setMap(levels[level])


setPushables({
  [ player ]: [box]
})


// inputs for player movement control
onInput("s", () => {
  getFirst(player).y += 1; // positive y is downwards
});
onInput("w", () => {
  getFirst(player).y -= 1;
});
onInput("a", () => {
  getFirst(player).x -= 1;
});
onInput("d", () => {
  getFirst(player).x += 1;
});
// inputs for player movement control


afterInput(() => {
  const targetNumber = tilesWith(target).length;
  const boxCovered = tilesWith(target, box).length;
  const entangledRedACovered = tilesWith(target, entangled_box_red_a).length;
  const entangledRedBCovered = tilesWith(target, entangled_box_red_b).length;
  const numberCovered = boxCovered + entangledRedACovered + entangledRedBCovered;
  if (numberCovered === targetNumber) {
  addText("level completed", { y: 4, color: color`5` });
  
  const currentLevel = levels[level];
  
  if (currentLevel !== undefined) {
    setMap(currentLevel);
    level = level + 1;  // Increment the level after setting the new level
  } else {
    addText("you win!", { y: 4, color: color`3` });
  }
}
});